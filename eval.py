# eval函数
# 将一个字符串的引号去掉，然后按照Python表达式执行它
eval("print('Ness Dawnastist')")
a = eval("2+2")
print(a)

a = eval(input("输入一个整数"))
b = input("输入一个整数")
c = int(eval(input("输入一个整数")))
d = int(input("输入一个整数"))

"""
1. a = eval(input("输入一个整数"))

步骤：
1. input("输入一个整数")：提示用户输入一个整数，并将用户输入的内容作为字符串返回。
2. eval(...)：将用户输入的字符串作为 Python 表达式进行求值。
3. 将求值结果赋值给变量 a。

解释：
这行代码不仅能接受整数输入，还能接受并执行任何有效的 Python 表达式。
如果输入 "123"，eval 会计算结果并将 123 作为整数赋值给 a。
如果输入 "2 + 3"，eval 会计算结果并将 5 作为整数赋值给 a。
存在安全风险，因为 eval 会执行任何输入的代码，可能导致执行恶意代码。

2. b = input("输入一个整数")

步骤：
1. input("输入一个整数")：提示用户输入一个整数，并将用户输入的内容作为字符串返回。
2. 将返回的字符串直接赋值给变量 b。

解释：
用户输入的内容会以字符串形式赋值给 b，即使用户输入的是一个整数，例如输入 123，b 的值会是字符串 "123"。

3. c = int(eval(input("输入一个整数")))

步骤：
1. input("输入一个整数")：提示用户输入一个整数，并将用户输入的内容作为字符串返回。
2. eval(...)：将用户输入的字符串作为 Python 表达式进行求值。
3. int(...)：将 eval 求值的结果转换为整数类型。
4. 将转换后的整数值赋值给变量 c。

解释：
这行代码首先通过 eval 计算输入的字符串表达式，然后将结果转换为整数。例如，用户输入 "2 + 3"，eval 会计算结果 5，然后 int(5) 仍为 5，最终赋值给 c。
同样存在 eval 的安全风险。

4. d = int(input("输入一个整数"))

步骤：
1. input("输入一个整数")：提示用户输入一个整数，并将用户输入的内容作为字符串返回。
2. int(...)：将用户输入的字符串直接转换为整数类型。
3. 将转换后的整数值赋值给变量 d。

解释：
这行代码将用户输入的字符串直接转换为整数类型。如果用户输入 "123"，int("123") 会返回整数 123，并赋值给 d。
如果输入的不是有效的整数字符串，例如 "abc"，则会引发 ValueError 异常。
"""